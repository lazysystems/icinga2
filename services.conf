/*
 * Service apply rules.
 *
 * The CheckCommand objects `ping4`, `ping6`, etc
 * are provided by the plugin check command templates.
 * Check the documentation for details.
 *
 * Tip: Use `icinga2 object list --type Service` to
 * list all service objects after running
 * configuration validation (`icinga2 daemon -C`).
 */

/*
 * This is an example host based on your
 * local host's FQDN. Specify the NodeName
 * constant in `constants.conf` or use your
 * own description, e.g. "db-host-1".
 */

/*
 * These are generic `ping4` and `ping6`
 * checks applied to all hosts having the
 * `address` resp. `address6` attribute
 * defined.
 */
apply Service "ping4" {
  import "generic-service"
  display_name = "Server up and reachable (ping)"
  check_command = "ping4"

  assign where host.address
}

apply Service "ping6" {
  import "generic-service"
  display_name = "Server up and reachable (ping IPv6)"

  check_command = "ping6"

  assign where host.address6
}

/*
 * Apply the `ssh` service to all hosts
 * with the `address` attribute defined and
 * the custom attribute `os` set to `Linux`.
 */

/* THIS MUST BE CHANGED TO PORT 2121; disable it until I do that 
*/
apply Service "ssh" {
  import "generic-service"
  display_name = "Server up and reachable (SSH)"

  check_command = "ssh"
  assign where (host.address || host.address6) && host.vars.os == "Linux"
}



apply Service for (http_vhost => config in host.vars.http_vhosts) {
  display_name = "web http status check (http get request port 80)"
  import "generic-service"

  check_command = "http"

  vars += config
}

apply Service for (disk => config in host.vars.disks) {
  import "generic-service"

  check_command = "disk"

  vars += config
}

apply Service "icinga" {
  import "generic-service"
  display_name = "monitoring agent up and working (icinga)"
  check_command = "icinga"

  assign where host.name == NodeName
}

apply Service "load" {
  import "generic-service"
  display_name = "CPU load"
  check_command = "load"

  /* Used by the ScheduledDowntime apply rule in `downtimes.conf`. */
  vars.backup_downtime = "02:00-03:00"

  assign where host.name == NodeName
}

apply Service "procs" {
  import "generic-service"

  check_command = "procs"

  assign where host.name == NodeName
}

apply Service "swap" {
  import "generic-service"

  check_command = "swap"

  assign where host.name == NodeName
}

apply Service "users" {
  import "generic-service"
  display_name = "OS concurrent users logged in"
  check_command = "users"

  assign where host.name == NodeName
}

apply Service "ubuntu_check_disk" {
 display_name = "disk utilization ( / )"
  import "generic-service"
  check_command = "nrpecheck_disk"
  assign where host.vars.agent == "nrpe"
}

apply Service "ubuntu_check_load" {
 display_name = "CPU load"
  import "generic-service"
  check_command = "nrpecheck_load"
  assign where host.vars.agent == "nrpe"
  max_check_attempts = 60
  check_interval = 120
  retry_interval = 60
}

apply Service "ubuntu_check_users" {
  display_name = "OS concurrent users logged in"
  import "generic-service"
  check_command = "nrpecheck_users"
  assign where host.vars.agent == "nrpe"
}


apply Service "ubuntu_check_cpu" {
  display_name = "CPU utilization (percentage)"
  import "generic-service"
  check_command = "nrpecheck_cpu"
  assign where host.vars.agent == "nrpe"
  max_check_attempts =36
  check_interval = 300
  retry_interval = 300
}


apply Service "ubuntu_check_swap" {
  display_name = "Memory swap utilization (percentage)"
  import "generic-service"
  check_command = "nrpecheck_swap"
  assign where host.vars.agent == "nrpe"
}



apply Service "nrpecheck_longterm-load" {
  display_name = "cpu load extended timeframe"
  import "generic-service"
  check_command = "nrpecheck_longterm-load"
  assign where host.vars.agent == "nrpe"
  max_check_attempts = 9
  check_interval = 14400
  retry_interval = 14400
}

apply Service "nrpecheck_ram" {
  display_name = "Memory RAM usage"
  import "generic-service"
  check_command = "nrpecheck_ram"
  assign where host.vars.agent == "nrpe"
}

